# Generated by Django 4.2.25 on 2025-10-14 15:16

from decimal import Decimal
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('products', '0001_initial'),
        ('tenants', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ExportJob',
            fields=[
                ('export_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('format', models.CharField(choices=[('csv', 'CSV'), ('json', 'JSON'), ('xlsx', 'Excel'), ('parquet', 'Parquet')], help_text='Export file format', max_length=20)),
                ('filters', models.JSONField(blank=True, default=dict, help_text='Export filters and criteria')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('manifest', models.JSONField(blank=True, default=dict, help_text='Export metadata and configuration')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Export creation timestamp')),
                ('tenant', models.ForeignKey(db_column='tenant_id', on_delete=django.db.models.deletion.CASCADE, related_name='export_jobs', to='tenants.tenant')),
            ],
            options={
                'verbose_name': 'Export Job',
                'verbose_name_plural': 'Export Jobs',
                'db_table': 'export_jobs',
            },
        ),
        migrations.CreateModel(
            name='ExportChunk',
            fields=[
                ('chunk_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('chunk_index', models.PositiveIntegerField(help_text='Order of this chunk in the export')),
                ('storage_path', models.TextField(help_text='Path to the chunk file in storage', max_length=500)),
                ('bytes', models.PositiveBigIntegerField(default=0, help_text='Size of the chunk in bytes')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('export_job', models.ForeignKey(db_column='export_id', on_delete=django.db.models.deletion.CASCADE, related_name='chunks', to='analytics.exportjob')),
            ],
            options={
                'verbose_name': 'Export Chunk',
                'verbose_name_plural': 'Export Chunks',
                'db_table': 'export_chunks',
            },
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('source_table', models.TextField(help_text='Name of the table that was modified', max_length=100)),
                ('source_id', models.UUIDField(help_text='ID of the record that was modified')),
                ('action', models.CharField(choices=[('create', 'Create'), ('update', 'Update'), ('delete', 'Delete'), ('restore', 'Restore')], help_text='Type of action performed', max_length=20)),
                ('diff', models.JSONField(blank=True, default=dict, help_text='Changes made to the record')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Audit log creation timestamp')),
                ('tenant', models.ForeignKey(db_column='tenant_id', on_delete=django.db.models.deletion.CASCADE, related_name='audit_logs', to='tenants.tenant')),
            ],
            options={
                'verbose_name': 'Audit Log',
                'verbose_name_plural': 'Audit Logs',
                'db_table': 'audit_logs',
            },
        ),
        migrations.CreateModel(
            name='PriceHistory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('price', models.DecimalField(decimal_places=2, help_text='Price at this point in time', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('effective_from', models.DateTimeField(help_text='When this price became effective')),
                ('effective_to', models.DateTimeField(blank=True, help_text='When this price stopped being effective', null=True)),
                ('product', models.ForeignKey(db_column='product_id', on_delete=django.db.models.deletion.CASCADE, related_name='price_history', to='products.product')),
                ('tenant', models.ForeignKey(db_column='tenant_id', on_delete=django.db.models.deletion.CASCADE, related_name='price_history', to='tenants.tenant')),
            ],
            options={
                'verbose_name': 'Price History',
                'verbose_name_plural': 'Price History',
                'db_table': 'price_history',
                'indexes': [models.Index(fields=['product', 'effective_from'], name='price_history_product_from_idx'), models.Index(fields=['tenant', 'effective_from'], name='price_history_tenant_from_idx'), models.Index(fields=['effective_from'], name='price_history_eff_from_idx')],
            },
        ),
        migrations.CreateModel(
            name='PriceEvent',
            fields=[
                ('event_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('old_price', models.DecimalField(decimal_places=2, help_text='Previous price', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('new_price', models.DecimalField(decimal_places=2, help_text='New price', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('pct_change', models.DecimalField(decimal_places=4, help_text='Percentage change in price', max_digits=8)),
                ('anomaly_flag', models.BooleanField(default=False, help_text='Whether this price change is anomalous')),
                ('meta', models.JSONField(blank=True, default=dict, help_text='Additional event metadata')),
                ('received_at', models.DateTimeField(auto_now_add=True, help_text='Event reception timestamp')),
                ('product', models.ForeignKey(db_column='product_id', on_delete=django.db.models.deletion.CASCADE, related_name='price_events', to='products.product')),
                ('tenant', models.ForeignKey(db_column='tenant_id', on_delete=django.db.models.deletion.CASCADE, related_name='price_events', to='tenants.tenant')),
            ],
            options={
                'verbose_name': 'Price Event',
                'verbose_name_plural': 'Price Events',
                'db_table': 'price_events',
                'indexes': [models.Index(fields=['tenant', 'product', 'received_at'], name='pe_tpt_idx'), models.Index(fields=['product', 'received_at'], name='pe_prd_time_idx'), models.Index(fields=['anomaly_flag'], name='pe_anom_idx'), models.Index(fields=['received_at'], name='pe_recv_idx')],
            },
        ),
        migrations.CreateModel(
            name='MetricsPreagg',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('group_key', models.TextField(help_text='Grouping key for the metrics', max_length=255)),
                ('period_start', models.DateField(help_text='Start of the metrics period')),
                ('period_end', models.DateField(help_text='End of the metrics period')),
                ('metrics', models.JSONField(default=dict, help_text='Pre-aggregated metrics data')),
                ('last_updated', models.DateTimeField(auto_now=True, help_text='Last metrics update')),
                ('tenant', models.ForeignKey(db_column='tenant_id', on_delete=django.db.models.deletion.CASCADE, related_name='metrics_preagg', to='tenants.tenant')),
            ],
            options={
                'verbose_name': 'Pre-aggregated Metrics',
                'verbose_name_plural': 'Pre-aggregated Metrics',
                'db_table': 'metrics_preagg',
                'indexes': [models.Index(fields=['tenant', 'period_start'], name='metrics_tenant_period_idx'), models.Index(fields=['group_key'], name='metrics_group_key_idx'), models.Index(fields=['period_start', 'period_end'], name='metrics_period_range_idx')],
            },
        ),
        migrations.CreateModel(
            name='IdempotencyKey',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('idempotency_key', models.TextField(help_text='Unique idempotency key', max_length=255)),
                ('request_hash', models.TextField(help_text='Hash of the request payload', max_length=64)),
                ('response_summary', models.JSONField(blank=True, default=dict, help_text='Summary of the response')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Key creation timestamp')),
                ('expires_at', models.DateTimeField(help_text='When this key expires')),
                ('tenant', models.ForeignKey(db_column='tenant_id', on_delete=django.db.models.deletion.CASCADE, related_name='idempotency_keys', to='tenants.tenant')),
            ],
            options={
                'verbose_name': 'Idempotency Key',
                'verbose_name_plural': 'Idempotency Keys',
                'db_table': 'idempotency_keys',
                'indexes': [models.Index(fields=['tenant', 'idempotency_key'], name='idempotency_tenant_key_idx'), models.Index(fields=['expires_at'], name='idempotency_expires_at_idx'), models.Index(fields=['status'], name='idempotency_status_idx')],
            },
        ),
        migrations.AddConstraint(
            model_name='idempotencykey',
            constraint=models.UniqueConstraint(fields=('tenant', 'idempotency_key'), name='unique_tenant_idempotency_key'),
        ),
        migrations.AddIndex(
            model_name='exportjob',
            index=models.Index(fields=['tenant', 'status'], name='export_jobs_tenant_status_idx'),
        ),
        migrations.AddIndex(
            model_name='exportjob',
            index=models.Index(fields=['format'], name='export_jobs_format_idx'),
        ),
        migrations.AddIndex(
            model_name='exportjob',
            index=models.Index(fields=['created_at'], name='export_jobs_created_at_idx'),
        ),
        migrations.AddIndex(
            model_name='exportchunk',
            index=models.Index(fields=['export_job', 'chunk_index'], name='export_chunks_job_index_idx'),
        ),
        migrations.AddIndex(
            model_name='exportchunk',
            index=models.Index(fields=['status'], name='export_chunks_status_idx'),
        ),
        migrations.AddConstraint(
            model_name='exportchunk',
            constraint=models.UniqueConstraint(fields=('export_job', 'chunk_index'), name='unique_export_chunk_index'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['tenant', 'source_table'], name='audit_logs_tenant_table_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['source_table', 'source_id'], name='audit_logs_table_id_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['action'], name='audit_logs_action_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['created_at'], name='audit_logs_created_at_idx'),
        ),
    ]
